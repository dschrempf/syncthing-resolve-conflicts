#!/usr/bin/env bash

# Check for sync conflicts and resolve them. Inspired by 'pacdiff' from Arch
# Linux.

declare -r myname='syncthing-resolve-conflicts'
declare -r myver='1.1.0'

diffprog=${DIFFPROG:-'vim -d'}
USE_COLOR='y'
declare -i USE_FIND=0
declare DIRECTORY=""
declare -a ignored
declare -a nontext

plain() {
    (( QUIET )) && return
    local mesg
    mesg="$1"; shift
    # shellcheck disable=SC2059
    printf "    ${mesg}${ALL_OFF}\\n" "$@" >&1
}

msg() {
    (( QUIET )) && return
    local mesg
    mesg="$1"; shift
    # shellcheck disable=SC2059
    printf "${GREEN}==>${ALL_OFF} ${mesg}${ALL_OFF}\\n" "$@" >&1
}

msg2() {
    (( QUIET )) && return
    local mesg
    mesg="$1"; shift
    # shellcheck disable=SC2059
    printf "${BLUE} ->${ALL_OFF} ${mesg}${ALL_OFF}\\n" "$@" >&1
}

ask() {
    local mesg
    mesg="$1"; shift
    # shellcheck disable=SC2059
    printf " ${BLUE}::${ALL_OFF} ${mesg}${ALL_OFF}" "$@" >&1
}

if [ -n "$(command -v gettext)" ]; then
    translate() {
        gettext "$@"
    }
else
    translate() {
        printf %s "$@"
    }
fi
warning() {
    local mesg
    mesg="$1"; shift
    # shellcheck disable=SC2059
    printf "${YELLOW}==> $(translate "WARNING:")${ALL_OFF} ${mesg}${ALL_OFF}\\n" "$@" >&2
}

error() {
    local mesg
    mesg="$1"; shift
    # shellcheck disable=SC2059
    printf "${RED}==> $(translate "ERROR:")${ALL_OFF} ${mesg}${ALL_OFF}\\n" "$@" >&2
}

usage() {
    cat <<EOF
${myname} v${myver}

Inspired by 'pacdiff'. A simple program to merge or remove sync conflicts.
'locate' (or 'find', see -f option) is used to find conflicts. In case the
database is not recent, run 'updatedb'.

Usage: $myname [-d DIR] [-f] [-o] [--nocolor]

General Options:
  -d/--directory DIR  only scan for sync conflicts in the directory DIR
  -f/--find           use find instead of locate; by default, scan the home
                      directory of the current user, but please see the -d
                      option
  -o/--output         print files instead of merging them
  --nocolor           remove colors from output
  -v/--version        print version and exit
  -h/--help           print usage and exit

Environment Variables:
  DIFFPROG          override the merge program: (default: 'vim -d')

Example: DIFFPROG=meld $myname
Example: $myname --output

EOF
}

version() {
    printf "%s %s\\n" "$myname" "$myver"
    echo 'Copyright (C) 2020 Dominik Schrempf <dominik.schrempf@gmail.com>'
    echo 'Inspired by "pacdiff".'
}

cmd() {
    if (( USE_FIND )); then
        if [[ -z $DIRECTORY ]]
        then
            # echo "find ~/ -name '*sync-conflict*' -print0"
            find ~/ -name '*sync-conflict*' -print0
        else
            # echo "find $DIRECTORY -name '*sync-conflict*' -print0" >&2
            find "$DIRECTORY" -name '*sync-conflict*' -print0
        fi
    else
        case "$(uname -s)" in
            Darwin)
                locate_cmd=(locate -0);;
            *)
                locate_cmd=(locate -0 -e);;
        esac
        if [[ -z $DIRECTORY ]]
        then
            locate_opt=(-b)
            glob="sync-conflict"
        else
            locate_opt=(-r)
            glob="^${DIRECTORY}.*sync-conflict.*"
        fi
        # echo "${locate_cmd[@]}" "${locate_opt[@]}" "$glob" >&2
        "${locate_cmd[@]}" "${locate_opt[@]}" "$glob"
    fi
}

check_dir() {
    if [[ ! -d $1 ]]
    then
        echo "Not a directory: $1."
        exit 1
    fi
    realpath "$1"
}

while [[ -n "$1" ]]; do
    case "$1" in
        -h|--help)
            usage; exit 0;;
        -v|-V|--version)
            version; exit 0;;
        -d|--directory)
            DIRECTORY=$(check_dir "$2"); shift;;
        -f|--find)
            USE_FIND=1;;
        -o|--output)
            OUTPUTONLY=1;;
        --nocolor)
            USE_COLOR='n';;
        *)
            usage; exit 1;;
    esac
    shift
done

# Check if messages are to be printed using color.
unset ALL_OFF BLUE GREEN RED YELLOW
if [[ -t 2 && $USE_COLOR = "y" ]]; then
    # Prefer terminal safe colored and bold text when tput is supported.
    if tput setaf 0 &>/dev/null; then
        ALL_OFF="$(tput sgr0)"
        BLUE="$(tput setaf 27)"
        GREEN="$(tput setaf 2)"
        RED="$(tput setaf 1)"
        YELLOW="$(tput setaf 3)"
    else
        ALL_OFF="\\e[1;0m"
        BLUE="\\e[1;34m"
        GREEN="\\e[1;32m"
        RED="\\e[1;31m"
        YELLOW="\\e[1;33m"
    fi
fi
readonly ALL_OFF BLUE GREEN RED YELLOW

if [ -z "$(command -v "${diffprog%% *}")" ] && (( ! OUTPUTONLY )); then
    error "Cannot find the $diffprog binary required for viewing differences."
    exit 1
fi

# warning "Recursive sync conflicts are not properly handled."

# See http://mywiki.wooledge.org/BashFAQ/020.
while IFS= read -u 3 -r -d '' conflict; do
    [[ ! -e "$conflict" && ! -L "$conflict" && ! -d "$conflict" ]] && continue

    if (( OUTPUTONLY )); then
        echo "$conflict"
        continue
    fi

    # Ignore backups in '.stversions' folders.
    if [[ "$conflict" = */.stversions/* ]]; then
        ignored+=("$conflict")
        continue
    fi

    # XXX: Maybe somebody wants to diff special non-text files?

    # Ignore binary files.
    if file -i "$conflict" | grep -qv text; then
        nontext+=("$conflict")
        continue
    fi

    # XXX: Recursive sync conflicts lead to problems if they are treated in the
    # wrong order. For now, collect sync conflicts of higher order and treat
    # them later.
    if [[ "$conflict" = *sync-conflict*sync-conflict* ]]; then
        recursive+=("$conflict")
        continue
    fi

    # Original filename. TODO: Improve pattern match (digits only).
    file="${conflict/.sync-conflict-????????-??????-???????/}"
    # Handle sync conflict.
    msg  "Sync conflict: %s" "$conflict"
    msg2 "Original file: %s" "$file"
    if [ ! -f "$file" ]; then
        warning "Original file not found for conflict %s." "$conflict"
        ignored+=("$conflict")
        continue
    elif test "$conflict" -ef "$file"; then
        warning "Original file and conflict file point to the same file. Ignoring conflict."
        continue
    elif cmp -s "$conflict" "$file"; then
        msg2 "Files are identical, removing..."
        plain "$(rm -v "$conflict")"
        continue
    else
        ask "(V)iew, (S)kip, (R)emove sync conflict, (O)verwrite with sync conflict, (Q)uit: [v/s/r/o/q] "
        # shellcheck disable=SC2162
        while read c; do
            case $c in
                q|Q) exit 0;;
                r|R) plain "$(rm -v "$conflict")"; break ;;
                o|O) plain "$(mv -v "$conflict" "$file")"; break ;;
                v|V)
                    $diffprog "$conflict" "$file"
                    ask "(V)iew, (S)kip, (R)emove sync conflict, (O)verwrite with sync conflict, (Q)uit: [v/s/r/o/q] "
                    continue ;;
                s|S) break ;;
                *) ask "Invalid answer. Try again: [v/s/r/o/q] "; continue ;;
            esac
        done
    fi
done 3< <(cmd)

# Print warning if files have been ignored and delete them if specified.
if [ ! ${#ignored[@]} -eq 0 ]
then
    warning "Some files have been ignored."
    (( ${#ignored[@]} )) && msg "%s" "${ignored[@]}"
    ask "(R)emove all ignored files, (A)sk for each file, (Q)uit: [r/q] "
    # shellcheck disable=SC2162
    while read c; do
        case "$c" in
            q|Q) exit 0 ;;
            a|A)
                for f in "${ignored[@]}"
                do
                    msg "Ignored file: %s" "$f"
                    ask "(R)emove, (S)kip, (Q)uit: [r/s/q] "
                    # shellcheck disable=SC2162
                    while read ci; do
                        case "$ci" in
                            q|Q) exit 0 ;;
                            s|S) break ;;
                            r|R) plain "$(rm -v "$f")"; break ;;
                            *) ask "Invalid answer.  Try again: [r/s/q] "; continue ;;
                        esac
                    done
                done
                ;;
            r|R) (( ${#ignored[@]} )) && plain "$(rm -v "${ignored[@]}")"; break ;;
            *) ask "Invalid answer.  Try again: [d/q] "; continue ;;
        esac
    done
fi

# Print warning if recursive conflicts of depth two or larger have been ignored
# and delete them if specified.
if [ ! ${#recursive[@]} -eq 0 ]
then
    warning "Some recursive conflicts have been ignored."
    (( ${#recursive[@]} )) && msg "%s" "${recursive[@]}"
    ask "(R)emove all ignored files, (A)sk for each file, (Q)uit: [r/q] "
    # shellcheck disable=SC2162
    while read c; do
        case "$c" in
            q|Q) exit 0 ;;
            a|A)
                for f in "${recursive[@]}"
                do
                    msg "Ignored file: %s" "$f"
                    ask "(R)emove, (S)kip, (Q)uit: [r/s/q] "
                    # shellcheck disable=SC2162
                    while read ci; do
                        case "$ci" in
                            q|Q) exit 0 ;;
                            s|S) break ;;
                            r|R) plain "$(rm -v "$f")"; break ;;
                            *) ask "Invalid answer.  Try again: [r/s/q] "; continue ;;
                        esac
                    done
                done
                ;;
            r|R) (( ${#recursive[@]} )) && plain "$(rm -v "${recursive[@]}")"; break ;;
            *) ask "Invalid answer.  Try again: [d/q] "; continue ;;
        esac
    done
fi

# Print warning if non-text sync conflicts have been detected and delete them
# one by one if specified.
if [ ! ${#nontext[@]} -eq 0 ]
then
    warning "The following conflicts involve non-text files:"
    for f in "${nontext[@]}"
    do
        msg "Non-text file: %s" "$f"
        ask "(R)emove, (S)kip, (Q)uit: [r/s/q] "
        # shellcheck disable=SC2162
        while read c; do
            case "$c" in
                q|Q) exit 0 ;;
                s|S) break ;;
                r|R) plain "$(rm -v "$f")"; break ;;
                *) ask "Invalid answer.  Try again: [r/s/q] "; continue ;;
            esac
        done
    done
fi

exit 0
